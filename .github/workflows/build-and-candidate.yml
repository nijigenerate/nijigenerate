# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
name: Build & Candidate

on:
  push:
    # Push all normally versioned tags
    # Include only release candidates!
    tags:
      - '*-rc*'

permissions:
  contents: write

jobs:
  build-resources:
    runs-on: ubuntu-22.04
    
    steps:
    - uses: actions/checkout@v3
    
    - name: 'Install dependencies'
      run: |
        sudo apt-get update
        sudo apt-get install gettext
        mkdir out/

    - name: 'Generate i18n'
      run: |
        # Build translations
        mkdir otl/
        
        sudo chmod +x ./gentl.sh
        ./gentl.sh

        cp out/* otl/

    - name: Make Artifact
      uses: actions/upload-artifact@v4
      with:
        name: translations
        path: otl/*
        retention-days: 1

  linux-build:
    runs-on: ubuntu-22.04

    steps:
    - uses: actions/checkout@v3
    - uses: dlang-community/setup-dlang@4c99aa991ce7d19dd3064de0a4f2f6b2f152e2d7
      with:
        compiler: ldc-latest
    
    - name: "Get build dependencies"
      run: |
        sudo apt-get update
        sudo apt install libsdl2-dev libfreetype6-dev gettext

    - name: Setup cmake
      uses: jwlawson/actions-setup-cmake@v2
      with:
        cmake-version: '3.31'
    
    - name: CMake version
      run: cmake --version
      
    - name: 'Generate i18n'
      run: |
        sudo chmod +x ./gentl.sh
        ./gentl.sh
      
    - name: "Clone dependencies & set versions"
      run: |
        git clone https://github.com/inochi2d/i2d-imgui.git --recurse-submodules
        git clone https://github.com/nijigenerate/nijilive.git
        dub add-local i2d-imgui/ "0.8.0"
        dub add-local nijilive/ "0.0.1"
        cd i2d-imgui
        git checkout c6a78f4a7510fd31a86998b7ceedfc2916ecfae0
        git submodule update --recursive

    - name: 'Build nijigenerate'
      run: |
        # Build metadata (like version information and icons)
        dub build --config=meta

        # Build the project, with its main file included, without unittests
        dub build --compiler=ldc2 --build=release --config=linux-full

    - name: Archive Zip
      uses: thedoctor0/zip-release@main
      with:
        type: 'zip'
        filename: 'nijigenerate-linux-x86_64.zip'
        directory: 'out/'
        path: '*'

    - name: 'Release'
      uses: softprops/action-gh-release@v1
      if: startsWith(github.ref, 'refs/tags/')
      with:
          files: |
            out/nijigenerate-linux-x86_64.zip
          generate_release_notes: true

  windows-build:
    runs-on: windows-latest
    needs: build-resources

    steps:
    - uses: actions/checkout@v3
    - uses: dlang-community/setup-dlang@4c99aa991ce7d19dd3064de0a4f2f6b2f152e2d7
      with:
        compiler: ldc-latest
        
    - name: Download translations
      uses: actions/download-artifact@v4
      with:
        name: translations
        path: out/i18n/
        
    - name: Setup cmake
      uses: jwlawson/actions-setup-cmake@v2
      with:
        cmake-version: '3.31'
    
    - name: CMake version
      run: cmake --version
      
    - name: "Clone dependencies & set versions"
      run: |
        git clone https://github.com/inochi2d/i2d-imgui.git --recurse-submodules
        git clone https://github.com/nijigenerate/nijilive.git
        dub add-local i2d-imgui/ "0.8.0"
        dub add-local nijilive/ "0.0.1"
        cd i2d-imgui
        git checkout c6a78f4a7510fd31a86998b7ceedfc2916ecfae0
        git submodule update --recursive

    - name: 'Build nijigenerate'
      run: |
        function Invoke-VSDevEnvironment {
        $vswhere = "${env:ProgramFiles(x86)}\Microsoft Visual Studio\Installer\vswhere.exe"
            $installationPath = & $vswhere -prerelease -legacy -latest -property installationPath
            $Command = Join-Path $installationPath "Common7\Tools\vsdevcmd.bat"
          & "${env:COMSPEC}" /s /c "`"$Command`" -no_logo && set" | Foreach-Object {
                if ($_ -match '^([^=]+)=(.*)') {
                    [System.Environment]::SetEnvironmentVariable($matches[1], $matches[2])
                }
            }
        }
        Invoke-VSDevEnvironment
        
        # Build metadata (like version information and icons)
        dub build --config=meta

        # Build the project, with its main file included, without unittests
        # Disabled release build because app crashed on Windows.
        dub build --compiler=ldc2 --build=release --config=win32-full

    - name: Archive Zip
      uses: thedoctor0/zip-release@main
      with:
        type: 'zip'
        filename: 'nijigenerate-win32-x86_64.zip'
        directory: 'out/'
        path: '*'
    
    - name: 'Add msbuild to PATH'
      uses: microsoft/setup-msbuild@v1.1
    
    - name: 'Build MSI'
      run: |
        cd build-aux/windows/wix

        # Install required dependency
        mkdir packages/
        nuget install WixToolset.UI.wixext -version 4.0.0 -OutputDirectory packages/

        # Build solution
        msbuild "nijigenerate.sln" -property:Configuration=Release

        # Copy installer out
        mv "bin/Release/nijigenerate.msi" "../../../out/nijigenerate-win32-x86_64.msi"
        cd ../../../

    - name: 'Release'
      uses: softprops/action-gh-release@v1
      if: startsWith(github.ref, 'refs/tags/')
      with:
          files: |
            out/nijigenerate-win32-x86_64.msi
            out/nijigenerate-win32-x86_64.zip

  macOS-build:
    runs-on: macos-14

    steps:
    - uses: actions/checkout@v3
    - uses: dlang-community/setup-dlang@v1.4.0
      with:
        compiler: ldc-latest
  
    - name: "Prepare for DMG packing"
      continue-on-error: true
      run: |
        export HOMEBREW_NO_INSTALL_CLEANUP=1
        export HOMEBREW_NO_INSTALLED_DEPENDENTS_CHECK=1
        brew update
        brew install create-dmg gettext

    - name: "Remove conflicting brew packages"
      continue-on-error: true
      run: |
        # Remove conflicting brew items
        brew remove --ignore-dependencies libpng brotli harfbuzz

    - name: "Remove final conflicting files"
      continue-on-error: true
      run: |
        # Delete fake harfbuzz if need be
        if [ -f "/usr/local/lib/libharfbuzz.dylib" ]; then
          sudo rm -r /usr/local/lib/libharfbuzz.dylib
        fi

        # And the .a for it as well
        if [ -f "/usr/local/lib/libharfbuzz.a" ]; then
          sudo rm -r /usr/local/lib/libharfbuzz.a
        fi

    - name: 'Generate i18n'
      run: |
        sudo chmod +x ./gentl.sh
        ./gentl.sh
      
    - name: "Clone dependencies & set versions"
      run: |
        git clone https://github.com/inochi2d/i2d-imgui.git --recurse-submodules
        git clone https://github.com/nijigenerate/nijilive.git
        dub add-local i2d-imgui/ "0.8.0"
        dub add-local nijilive/ "0.0.1"
        cd i2d-imgui
        git checkout c6a78f4a7510fd31a86998b7ceedfc2916ecfae0
        git submodule update --recursive

    - name: 'Build nijigenerate'
      env:
        DFLAGS: "-force-dwarf-frame-section=false"
      run: |
        # Build metadata (like version information and icons)
        dub build --config=meta
        
        # First build ARM64 version...
        echo "Building arm64 binary..."
        dub build --build=release --config=osx-full --arch=arm64-apple-macos
        mv "out/nijigenerate.app/Contents/MacOS/nijigenerate" "out/nijigenerate.app/Contents/MacOS/nijigenerate-arm64"

        # Then the X86_64 version...
        echo "Building x86_64 binary..."
        dub build --build=release --config=osx-full --arch=x86_64-apple-macos
        mv "out/nijigenerate.app/Contents/MacOS/nijigenerate" "out/nijigenerate.app/Contents/MacOS/nijigenerate-x86_64"

        # Glue them together with lipo
        echo "Gluing them together..."
        lipo "out/nijigenerate.app/Contents/MacOS/nijigenerate-x86_64" "out/nijigenerate.app/Contents/MacOS/nijigenerate-arm64" -output "out/nijigenerate.app/Contents/MacOS/nijigenerate" -create

        # Print some nice info
        echo "Done!"
        lipo -info "out/nijigenerate.app/Contents/MacOS/nijigenerate"

        # Cleanup and bundle
        echo "Cleaning up..."
        rm "out/nijigenerate.app/Contents/MacOS/nijigenerate-x86_64" "out/nijigenerate.app/Contents/MacOS/nijigenerate-arm64"
        ./build-aux/osx/osxbundle.sh

    - name: Archive Zip
      uses: thedoctor0/zip-release@main
      with:
        type: 'zip'
        filename: 'nijigenerate-macOS.zip'
        directory: 'out/'
        path: '*'

    - name: 'Build DMG'
      run: |
        ./build-aux/osx/gendmg.sh

    - name: 'Release'
      uses: softprops/action-gh-release@v1
      if: startsWith(github.ref, 'refs/tags/')
      with:
          files: |
            out/nijigenerate-macOS.zip
            out/Install_nijigenerate.dmg
